import os
import asyncio
import secrets
import time
from collections import deque
from datetime import datetime, timedelta, timezone
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from sqlalchemy import select, delete
from app.models import SessionLocal, User, Account, LastSnapshot, SymbolSnapshot
from tzlocal import get_localzone


# ==========================
# –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ª–∏–º–∏—Ç–æ–≤
# ==========================
message_queue = asyncio.Queue()
sent_timestamps = deque()         # –ª–∏–º–∏—Ç 30/—Å–µ–∫
user_timestamps = {}              # –ª–∏–º–∏—Ç 20/–º–∏–Ω –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


async def message_worker(bot: Bot):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É—á—ë—Ç–æ–º –ª–∏–º–∏—Ç–æ–≤ Telegram."""
    global sent_timestamps, user_timestamps
    while True:
        chat_id, text, kwargs = await message_queue.get()
        try:
            now = time.time()

            # --- –ª–∏–º–∏—Ç 30/—Å–µ–∫ ---
            while sent_timestamps and now - sent_timestamps[0] > 1:
                sent_timestamps.popleft()
            if len(sent_timestamps) >= 29:
                wait_time = 1 - (now - sent_timestamps[0])
                if wait_time > 0:
                    await asyncio.sleep(wait_time)

            # --- –ª–∏–º–∏—Ç 20/–º–∏–Ω –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
            if chat_id not in user_timestamps:
                user_timestamps[chat_id] = deque()
            while user_timestamps[chat_id] and now - user_timestamps[chat_id][0] > 60:
                user_timestamps[chat_id].popleft()
            if len(user_timestamps[chat_id]) >= 19:
                wait_time = 60 - (now - user_timestamps[chat_id][0])
                if wait_time > 0:
                    print(f"[RateLimit] –ó–∞–¥–µ—Ä–∂–∫–∞ {wait_time:.2f}—Å –¥–ª—è chat_id={chat_id}")
                    await asyncio.sleep(wait_time)

            # --- –æ—Ç–ø—Ä–∞–≤–∫–∞ ---
            await bot.send_message(chat_id=chat_id, text=text, **kwargs)

            sent_timestamps.append(time.time())
            user_timestamps[chat_id].append(time.time())

        except Exception as e:
            print(f"[MessageWorker] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        finally:
            message_queue.task_done()


async def send_queued_message(chat_id: str, text: str, **kwargs):
    """–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å."""
    await message_queue.put((chat_id, text, kwargs))


def get_drawdown_color(dd: float) -> str:
    if dd < -5:
        return "üî¥"
    elif dd < -2:
        return "üü†"
    else:
        return "üü¢"


# ==========================
# /start
# ==========================
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    with SessionLocal() as s:
        u = s.scalar(select(User).where(User.chat_id == chat_id))
        if not u:
            u = User(
                chat_id=chat_id,
                api_key=os.urandom(16).hex(),
                short_id=secrets.token_urlsafe(8),
            )
            s.add(u)
            s.commit()
    await cmd_accounts_menu(update, context)


# ==========================
# –ú–µ–Ω—é —Å—á–µ—Ç–æ–≤
# ==========================
async def cmd_accounts_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    with SessionLocal() as s:
        u = s.scalar(select(User).where(User.chat_id == chat_id))
        if not u:
            await send_queued_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ /start")
            return

        accounts = s.scalars(select(Account).where(Account.api_key == u.api_key)).all()
        accounts.sort(key=lambda x: x.name.lower())

        buttons = []
        for acc in accounts:
            snap = s.scalar(
                select(LastSnapshot)
                .where(LastSnapshot.api_key == u.api_key)
                .where(LastSnapshot.account_id == acc.account_id)
                .order_by(LastSnapshot.last_seen.desc())
            )

            if not snap or (
                snap.last_seen
                and datetime.utcnow().replace(tzinfo=timezone.utc)
                - snap.last_seen.replace(tzinfo=timezone.utc)
                > timedelta(minutes=1)
            ):
                status_icon = "‚ö†Ô∏è"
            else:
                status_icon = ""

            label = f"{status_icon} {acc.name}".strip()
            buttons.append(
                [InlineKeyboardButton(label, callback_data=f"acc:{acc.account_id}")]
            )

        host = os.getenv("WEB_HOST", "mtmonitor.ru:8000")
        scheme = "http"
        web_url = f"{scheme}://{host}/w/{u.short_id}"
        buttons.append(
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="showstatus"),
                InlineKeyboardButton("üåê Web", url=web_url),
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
            ]
        )

        reply_markup = InlineKeyboardMarkup(buttons)
        if update.callback_query:
            await update.callback_query.message.reply_text(
                "üìÇ –í—ã–±–µ—Ä–∏ —Å—á—ë—Ç:", reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "üìÇ –í—ã–±–µ—Ä–∏ —Å—á—ë—Ç:", reply_markup=reply_markup
            )


# ==========================
# /status
# ==========================
async def cmd_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    with SessionLocal() as s:
        u = s.scalar(select(User).where(User.chat_id == chat_id))
        if not u:
            await send_queued_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ /start")
            return

        snaps = s.scalars(
            select(LastSnapshot)
            .where(LastSnapshot.api_key == u.api_key)
            .order_by(LastSnapshot.last_seen.desc())
        ).all()

        if not snaps:
            await send_queued_message(chat_id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—á—ë—Ç–∞–º. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞.")
            return

        text = ""
        for snap in snaps:
            symbols = s.scalars(
                select(SymbolSnapshot)
                .where(SymbolSnapshot.api_key == u.api_key)
                .where(SymbolSnapshot.account_id == snap.account_id)
            ).all()

            dd_account = (
                (snap.balance - snap.equity) / snap.balance * 100 if snap.balance else 0
            )
            utc_time = snap.last_seen.replace(tzinfo=timezone.utc)
            local_time = utc_time.astimezone(get_localzone())

            acc = s.scalar(
                select(Account)
                .where(Account.api_key == u.api_key)
                .where(Account.account_id == snap.account_id)
            )

            factor = 0.01 if acc and acc.is_cent else 1.0
            if acc and acc.name and acc.name != str(snap.account_id):
                acc_header = f"üìä –°—Ç–∞—Ç—É—Å —Å—á—ë—Ç–∞ <b>{acc.name}</b> ({snap.account_id})\n"
            else:
                acc_header = f"üìä –°—Ç–∞—Ç—É—Å —Å—á—ë—Ç–∞ <b>{acc.name}</b>\n"

            text += (
                acc_header
                + f"–¶–µ–Ω—Ç–æ–≤—ã–π: {'–î–∞' if acc.is_cent else '–ù–µ—Ç'}\n"
                f"Equity: <b>${snap.equity * factor:.2f}</b>\n"
                f"Balance: <b>${snap.balance * factor:.2f}</b>\n"
                f"Margin Level: {snap.margin_level:.2f}%\n"
                f"–ü—Ä–æ—Å–∞–¥–∫–∞ –ø–æ —Å—á—ë—Ç—É: {dd_account:.2f}%\n"
                f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {local_time:%Y-%m-%d %H:%M:%S}\n"
            )

            if symbols:
                text += "<pre>"
                for sym in symbols:
                    color = get_drawdown_color(sym.dd_percent)
                    text += (
                        f"{color} "
                        f"{sym.symbol:<6} "
                        f"{sym.price:<6.5f} "
                        f"{sym.dd_percent:+7.2f}% "
                        f"{sym.buy_lots:>5.2f}/{sym.buy_count:<1}‚ñ≤"
                        f"{sym.sell_lots:>5.2f}/{sym.sell_count:<1}‚ñº\n"
                    )
                text += "</pre>\n"
            else:
                text += "<i>–Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π</i>\n\n"

        await send_queued_message(chat_id, text, parse_mode="HTML")


# ==========================
# –ö–æ–ª–±—ç–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
# ==========================
async def callback_accounts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    account_id = query.data.split(":")[1]

    with SessionLocal() as s:
        acc = s.scalar(select(Account).where(Account.account_id == account_id))
        text = (
            f"–°—á—ë—Ç {acc.account_id}: {acc.name}\n"
            f"–¶–µ–Ω—Ç–æ–≤—ã–π: {'–î–∞' if acc.is_cent else '–ù–µ—Ç'}"
        )

        buttons = [
            [InlineKeyboardButton("üî§ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"rename:{account_id}")],
            [InlineKeyboardButton(
                "üí∞ –°–¥–µ–ª–∞—Ç—å –æ–±—ã—á–Ω—ã–º" if acc.is_cent else "üíµ –°–¥–µ–ª–∞—Ç—å —Ü–µ–Ω—Ç–æ–≤—ã–º",
                callback_data=f"togglecent:{account_id}"
            )],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Å—á—ë—Ç", callback_data=f"delete:{account_id}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="backtomain")],
        ]

        await query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(buttons))


async def callback_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data

    if data == "showstatus":
        await cmd_status(update, context)
        await cmd_accounts_menu(update, context)

    elif data == "settings":
        settings_buttons = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—á—ë—Ç", callback_data="addaccount")],
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞", callback_data="payment")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="backtomain")],
        ]
        await query.message.reply_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=InlineKeyboardMarkup(settings_buttons)
        )

    elif data == "backtomain":
        await cmd_accounts_menu(update, context)

    elif data == "payment":
        await query.message.reply_text("üí≥ –î–ª—è –≤–∞—Å 3 –º–µ—Å—è—Ü–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è üöÄ")
        await cmd_accounts_menu(update, context)

    elif data.startswith("rename:"):
        account_id = data.split(":")[1]
        context.user_data["rename_account"] = account_id
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è —Å—á—ë—Ç–∞:")

    elif data.startswith("togglecent:"):
        account_id = data.split(":")[1]
        with SessionLocal() as s:
            acc = s.scalar(select(Account).where(Account.account_id == account_id))
            if acc:
                acc.is_cent = not acc.is_cent
                s.commit()
                status = "–¶–µ–Ω—Ç–æ–≤—ã–π" if acc.is_cent else "–û–±—ã—á–Ω—ã–π"
                await query.message.reply_text(f"‚úÖ –°—á—ë—Ç {acc.name} —Ç–µ–ø–µ—Ä—å {status}")
            else:
                await query.message.reply_text("‚ùå –°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await cmd_accounts_menu(update, context)

    elif data.startswith("delete:"):
        account_id_str = data.split(":")[1]
        try:
            account_id = int(account_id_str)
        except ValueError:
            await update.callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID —Å—á—ë—Ç–∞", show_alert=True)
            return

        chat_id = str(update.effective_chat.id)
        with SessionLocal() as s:
            u = s.scalar(select(User).where(User.chat_id == chat_id))
            if not u:
                await update.callback_query.answer("–°–Ω–∞—á–∞–ª–∞ /start", show_alert=True)
                return

            acc = s.scalar(
                select(Account)
                .where(Account.api_key == u.api_key)
                .where(Account.account_id == account_id)
            )
            if not acc:
                await update.callback_query.answer("–°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            s.execute(
                delete(SymbolSnapshot)
                .where(SymbolSnapshot.api_key == u.api_key)
                .where(SymbolSnapshot.account_id == account_id)
            )
            s.execute(
                delete(LastSnapshot)
                .where(LastSnapshot.api_key == u.api_key)
                .where(LastSnapshot.account_id == account_id)
            )
            s.delete(acc)
            s.commit()

        await update.callback_query.answer("–°—á—ë—Ç —É–¥–∞–ª—ë–Ω")
        await update.callback_query.message.reply_text("üóë –°—á—ë—Ç —É–¥–∞–ª—ë–Ω")
        await cmd_accounts_menu(update, context)


async def handle_rename(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    if "rename_account" not in context.user_data:
        return

    account_id = context.user_data.pop("rename_account")
    new_name = update.message.text.strip()

    with SessionLocal() as s:
        acc = s.scalar(select(Account).where(Account.account_id == account_id))
        if acc:
            acc.name = new_name
            s.commit()
            await send_queued_message(chat_id, f"‚úÖ –°—á—ë—Ç {account_id} –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ ¬´{new_name}¬ª")
        else:
            await send_queued_message(chat_id, "‚ùå –°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def callback_addaccount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = str(update.effective_chat.id)

    with SessionLocal() as s:
        u = s.scalar(select(User).where(User.chat_id == chat_id))
        if not u:
            await query.message.reply_text("–°–Ω–∞—á–∞–ª–∞ /start")
            return

        instruction = f"""
<b>‚ûï –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å—á—ë—Ç:</b>

1Ô∏è‚É£ –°–∫–∞—á–∞–π—Ç–µ —ç–∫—Å–ø–µ—Ä—Ç–∞ <b>MTMonitor</b> (–Ω–∏–∂–µ –∫–Ω–æ–ø–∫–∞ ¬´üì• –°–∫–∞—á–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–∞¬ª).

2Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª <code>mtmonitor.mq4</code> –≤ –ø–∞–ø–∫—É <b>MQL4/Experts</b> –≤–∞—à–µ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ MetaTrader 4.
‚ñ´ –í MetaTrader: <i>–§–∞–π–ª ‚Üí –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –¥–∞–Ω–Ω—ã—Ö ‚Üí MQL4 ‚Üí Experts</i>

3Ô∏è‚É£ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ MetaTrader –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤.

4Ô∏è‚É£ –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞ <b>MTMonitor</b> –Ω–∞ –≥—Ä–∞—Ñ–∏–∫ –ª—é–±–æ–≥–æ <u>–Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞</u>.

5Ô∏è‚É£ –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–æ–≤–µ—Ç–Ω–∏–∫–∞:
‚ñ´ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>API-–∫–ª—é—á</b>:
<pre>{u.api_key}</pre>
‚ñ´ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏—Ç–µ –æ–ø—Ü–∏—é <b>¬´–†–∞–∑—Ä–µ—à–∏—Ç—å –∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π DLL¬ª</b>.

6Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ <b>–û–ö</b> ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –Ω–∞—á–Ω—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.

7Ô∏è‚É£ –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—á—ë—Ç –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –≤ –±–æ—Ç–µ –∏ –Ω–∞ –≤–µ–±-–ø–∞–Ω–µ–ª–∏.
"""

        buttons = [
            [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–∞", callback_data="sendexpert")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="backtomain")]
        ]

        await query.message.reply_html(instruction, reply_markup=InlineKeyboardMarkup(buttons))


async def callback_sendexpert(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    file_path = os.path.join(os.path.dirname(__file__), "mtmonitor.mq4")

    try:
        await query.message.reply_document(document=open(file_path, "rb"), filename="mtmonitor.mq4")
    except Exception as e:
        await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")


# ==========================
# Build bot
# ==========================
def build_bot() -> Application:
    load_dotenv("config.env", override=True)
    token = os.getenv("BOT_TOKEN")
    if not token or ":" not in token:
        raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü—Ä–æ–≤–µ—Ä—å .env (BOT_TOKEN=...)")

    app = Application.builder().token(token).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("status", cmd_status))
    app.add_handler(CommandHandler("web", cmd_status))
    app.add_handler(CommandHandler("accounts", cmd_accounts_menu))
    app.add_handler(CommandHandler("setaccount", lambda u, c: None))

    app.add_handler(CallbackQueryHandler(callback_accounts, pattern="^acc:"))
    app.add_handler(
        CallbackQueryHandler(
            callback_actions,
            pattern="^(rename:|togglecent:|delete:|showstatus|settings|backtomain|payment$)",
        )
    )
    app.add_handler(CallbackQueryHandler(callback_addaccount, pattern="^addaccount$"))
    app.add_handler(CallbackQueryHandler(callback_sendexpert, pattern="^sendexpert$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_rename))

    return app
